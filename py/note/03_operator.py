# -*- coding: UTF-8 -*-
"""
@Description  ：关于操作符
@Author       ：NixAutumna
@CreateDate   ：2024/8/21 22:45
"""

# 算数运算符
print(5 + 5)  # +表示加
print(6 - 4)  # -表示减
print(2 * 4)  # *表示乘
print(8 / 3)  # /表示除以,返回浮点数
print(23 % 2)  # %表示取模,具体公式:a % b = a - a // b * b
print(24 // 7)  # //表示除以并对商向下取整
print(2 ** 5)  # **表示乘方

# 比较运算符
print(5 == 6)  # ==表示数值上是否相等或字符串是否相同
print(5 != 6)  # !=表示数值上是否不相等或字符串是否不相同
print(5 < 6)  # <表示数值上是否小于
print(5 <= 6)  # <=表示数值上是否小于等于
print(5 > 6)  # >表示数值上是否大于
print(5 >= 6)  # >表示数值上是否大于等于
print("as" is "as")  # is表示引用对象是否为同一个
print("as" is not "as")  # is not表示引用对象是否不为同一个
print(12 <= 23 <= 5)  # python可以使用链式比较

# 逻辑运算符
# x and y 如果x为False返回x值且不对y部分进行运算,否则返回y值
print(True and True)
print(10 and 20)
# x or y 如果x为True返回x值且不对y部分进行运算,否则返回y值
print(False or False)
print(10 or 20)
# not x 如果x为True返回False,否则返回True
print(not False)
print(not 12)

# 赋值运算符,运算顺序从右到左,左边是变量,右边可以是变量,字面量,表达式
# = 是基本的赋值运算符,把右边的值赋给左边变量
# a @=(@为算数运算符中的一种) b 相当于 a = a @ b
a = 10
b = 20
a, b = b, a  # 一种奇妙的交换变量顺序的方式
print(a, b)

# 三元运算符 a if c else b 表示如果c为真返回a,c为假返回b
max = a if a > b else b

# 原码,反码,补码
# 二进制最高位是符号位,0表示正数,1表示负数
#     假定一个字节表示
#     3  -> 0000 0011
#     -3 -> 1000 0011
# 正数原码,反码,补码都一样
#     同样假定一个字节表示
#     3  -> 原码 0000 0011
#           反码 0000 0011
#           补码 0000 0011
# 负数的反码:原码的符号位不变,其它位取反
# 负数的补码:反码+1
#     同样假定一个字节表示
#     -3 -> 原码 1000 0011
#           反码 1111 1100
#           补码 1111 1101
# 0的反码补码都是0
# 计算机运算时,以补码运算
#     同样假定一个字节表示
#          1     +     3
#     =0000 0001 + 0000 0011  化为原码
#     =0000 0001 + 0000 0011  化为补码
#     =0000 0100              补码计算
#     =0000 0100              化回原码
#     =4                      化为十进制
#          1     -     3
#     =    1     +    -3
#     =0000 0001 + 1000 0011  化为原码
#     =0000 0001 + 1111 1101  化为补码
#     =1111 1110              补码计算
#     =1000 0010              化回原码
#     =-2                     化为十进制


# 位运算符
# 按位非~:把数据补码每一位取反
print(~-2)  # 假设一字节存储-2->1111 1110->0000 0001->1
print(~2)  # 2->0000 0010->1111 1101->1000 0011->-3

# 按位与&:把数据补码对比,都为1结果为1,其他情况结果0
print(-2 & 3)
# -2 -> 1111 1110
#  3 -> 0000 0011
#       0000 0010 -> 2

# 按位异或^:把数据补码对比,不相同结果为1,相同结果为0
print(-2 ^ 3)
# -2 -> 1111 1110
#  3 -> 0000 0011
#       1111 1101 -> 1111 1100 -> 1000 0011 -> -3

# 按位或|:把数据补码对比,都为0结果为0,其他情况结果1
print(-2 | 3)
# -2 -> 1111 1110
#  3 -> 0000 0011
#       1111 1111 -> 1111 1110 -> 1000 0001 -> -1

# x<<b左移运算符:把x补码左移b位,符号位不变,高位丢弃,低位补0,相当于x*(2**b)
print(5 << 1)
# 5 -> 0000 0101 -> 0000 1010 -> 10
print(-3 << 2)
# -3 -> 1111 1101 -> 1111 0100 -> 1111 0011 -> 1000 1100 -> -12

# x>>b右移运算符:把x补码右移b位,低位丢弃,符号位不变,高位补符号位,相当于x//(2**b)
print(5 >> 1)
# 5 -> 0000 0101 -> 0000 0010 -> 2
print(-15 >> 3)
# -15 -> 1000 1111 -> 1111 0001 -> 1111 1110 -> 1111 1101 -> 1000 0010 -> -2

# 运算符优先级:括号>算数运算符>位运算符>比较运算符>逻辑运算符>赋值运算符

# ()                      | 加括号的
# ------------------------|------------------------
# **                      | 乘方
# ------------------------|------------------------
# +,-,~                   | 正负号,按位非
# ------------------------|------------------------
# *,@,/,//,%              | 乘,矩阵乘,除整除,取余
# ------------------------|------------------------
# +,-                     | 加法减法
# ------------------------|------------------------
# >>,<<                   | 移位运算符
# ------------------------|------------------------
# &                       | 按位与
# ------------------------|------------------------
# ^                       | 按位异或
# ------------------------|------------------------
# |                       | 按位或
# ------------------------|------------------------
# in, not in, is, is not, | 比较运算,
# <, <=, >, >=, !=, ==    | 包括成员检测和标识号检测
# ------------------------|------------------------
# not                     | 逻辑非
# ------------------------|------------------------
# and                     | 逻辑与
# ------------------------|------------------------
# or                      | 逻辑或
# ------------------------|------------------------
# =, %=, /=, //=, -=,     | 赋值运算符
# +=, *=, **=             |
