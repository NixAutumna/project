package progress.static_;
/**
 * 关于代码块
 * @auther Bai_YiA2
 */
public class CodeBlock {
    public static void main(String[] args) {
        /*
        代码化块又称为初始化块,属于类中的成员[即是类的一部分],类似于万法。将逻辑语句封装在方法体中，通过{}包围起来。
        但和方法不同,没有方法名,没有返回,没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类或创建对象时隐式调用。
        
        1)相当于另外一种形式的构造器(对构造器的补充机制)，可以做初始化的操作
        2)如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的重用性
        
        定义方法：
        [修饰符]{
        代码
        };
        
        注意:
        1)修饰符可选,要写的话,也只能写static
        2)代码块分为两类，使用static修饰的叫静态代码块，没有static修饰的，叫普通代码块/非静态代码块
        3)静态代码块随着类加载执行，只执行一次
        4)普通代码块每一次实例化对象就执行，如果只是使用静态成员不会被执行
        5)类在何时加载：1创建对象实例时(new) 2创建子类对象实例,父类也会被加载 3使用类的静态成员时(静态属性，静态方法)
        6)普通的代码块,在创建对象实例时,会被隐式的调用。
        7)逻辑语句可以为任何逻辑语句(输入、输出、方法调用、循环、判断等)
        8);号可以写上,也可以省略。
        9)创建一个对象时，在一个类调用顺序是:
        1.调用静态代码块和静态属性初始化(注意:静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用)工
        2.调用普通代码块和普通属性的初始化(注意:普通代码块和普通属性初始化调用的优先级一样,如果有多个普通代码块和多个普通属性初始化,则按定义顺序调用)
        3.调用构造方法。
        10)构造器的最前面其实隐含了super()和调用普通代码块,
        静态相关的代码块，属性初始化，在类加载时，就执行完毕，因此是优先于构造器和普通代码块执行的
        11)创建一个子类对象时(继承关系)，他和父类的静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法的调用顺序如下:
        1.父类的静态代码块和静态属性(优先级一样,按定义顺序执行)
        2.子类的静态代码块和静态属性(优先级一样,按定义顺序执行)
        3.父类的普通代码块和普通属性初始化(优先级一样,按定义顺序执行)
        4.父类的构造方法
        5.子类的普通代码块和普通属性初始化(优先级一样,按定义顺序执行)
        12)静态代码块只能直接调用静态成员(静态属性和静态方法)，普通代码块可以调用任意成员。
         */
        AA aa = new AA();// 加载类，静态代码块被调用，之后调用普通代码块
        AA aa1 = new AA(1);// 静态代码块已经被调用一次，只调用普通代码块
        BB bb = new BB();// 加载父类，静态代码块被调用，之后调用普通代码块，最后调用子类代码块
        AA.a();// 调用类的静态方法，加载类，静态代码块被调用，而之前已经被调用，若没有被调用则会在静态方法执行后执行
        BB.b();// 调用子类静态方法， 加载父类，静态代码块被调用，而之前已经被调用，若没有被调用则会在静态方法执行后执行
        AAA aaa = new AAA();// 验证同类调用顺序
    }
}

class AA {
    public int a;
    public int b;
    
    static {
        System.out.println("执行静态代码块");
    }
    
    {
        System.out.println("执行普通代码块");
    }
    
    public AA() {
    }
    
    public AA(int a) {
        this.a = a;
    }
    
    public AA(int a, int b) {
        this.a = a;
        this.b = b;
    }
    
    public static void a() {
        System.out.println("调用静态方法");
    }
}
class BB extends AA {
    static {
        System.out.println("执行静态代码块");
    }
    
    {
        System.out.println("执行子类普通代码块");
    }
    
    public static void b() {
        System.out.println("调用静态方法");
    }
}

class AAA {
    static {
        System.out.println("执行静态代码块1");
    }
    
    static {
        System.out.println("执行静态代码块2");
    }
    
    {
        System.out.println("执行普通代码块1");
    }
    
    {
        System.out.println("执行普通代码块2");
    }
    
    AAA() {
        System.out.println("构造器");
    }
}